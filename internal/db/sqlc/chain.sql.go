// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: chain.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getChainByChainID = `-- name: GetChainByChainID :one
SELECT id, name, chain_id, rpc_url, native_currency, explorer_url, status, created_at, updated_at FROM chains WHERE chain_id = $1
`

func (q *Queries) GetChainByChainID(ctx context.Context, chainID int32) (Chain, error) {
	row := q.db.QueryRow(ctx, getChainByChainID, chainID)
	var i Chain
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ChainID,
		&i.RpcUrl,
		&i.NativeCurrency,
		&i.ExplorerUrl,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getChainByID = `-- name: GetChainByID :one
SELECT id, name, chain_id, rpc_url, native_currency, explorer_url, status, created_at, updated_at FROM chains WHERE id = $1
`

func (q *Queries) GetChainByID(ctx context.Context, id pgtype.UUID) (Chain, error) {
	row := q.db.QueryRow(ctx, getChainByID, id)
	var i Chain
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ChainID,
		&i.RpcUrl,
		&i.NativeCurrency,
		&i.ExplorerUrl,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getChains = `-- name: GetChains :many
SELECT id, name, chain_id, rpc_url, native_currency, explorer_url, status, created_at, updated_at FROM chains
`

func (q *Queries) GetChains(ctx context.Context) ([]Chain, error) {
	rows, err := q.db.Query(ctx, getChains)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chain
	for rows.Next() {
		var i Chain
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ChainID,
			&i.RpcUrl,
			&i.NativeCurrency,
			&i.ExplorerUrl,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
