// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transaction.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (chain_id, from_address, to_address, tx_hash, created_at, updated_at) 
VALUES ($1, $2, $3, $4, $5, $6) 
RETURNING id, chain_id, from_address, to_address, tx_hash, created_at, updated_at
`

type CreateTransactionParams struct {
	ChainID     int32
	FromAddress string
	ToAddress   string
	TxHash      string
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, createTransaction,
		arg.ChainID,
		arg.FromAddress,
		arg.ToAddress,
		arg.TxHash,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.ChainID,
		&i.FromAddress,
		&i.ToAddress,
		&i.TxHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTransactionByID = `-- name: GetTransactionByID :one
SELECT id, chain_id, from_address, to_address, tx_hash, created_at, updated_at FROM transactions WHERE id = $1
`

func (q *Queries) GetTransactionByID(ctx context.Context, id pgtype.UUID) (Transaction, error) {
	row := q.db.QueryRow(ctx, getTransactionByID, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.ChainID,
		&i.FromAddress,
		&i.ToAddress,
		&i.TxHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTransactionCount = `-- name: GetTransactionCount :one
SELECT COUNT(*) 
FROM transactions 
WHERE (from_address = $1 OR to_address = $1)
  AND ($2::int IS NULL OR chain_id = $2)
`

type GetTransactionCountParams struct {
	FromAddress string
	Column2     int32
}

func (q *Queries) GetTransactionCount(ctx context.Context, arg GetTransactionCountParams) (int64, error) {
	row := q.db.QueryRow(ctx, getTransactionCount, arg.FromAddress, arg.Column2)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getTransactionsByWalletAddress = `-- name: GetTransactionsByWalletAddress :many
SELECT id, chain_id, from_address, to_address, tx_hash, created_at, updated_at FROM transactions 
WHERE from_address = $1 OR to_address = $1
  AND ($2::int IS NULL OR chain_id = $2)
ORDER BY created_at DESC
LIMIT $3
OFFSET $4
`

type GetTransactionsByWalletAddressParams struct {
	FromAddress string
	Column2     int32
	Limit       int32
	Offset      int32
}

func (q *Queries) GetTransactionsByWalletAddress(ctx context.Context, arg GetTransactionsByWalletAddressParams) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, getTransactionsByWalletAddress,
		arg.FromAddress,
		arg.Column2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.ChainID,
			&i.FromAddress,
			&i.ToAddress,
			&i.TxHash,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
