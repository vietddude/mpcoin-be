// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: wallet.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createWallet = `-- name: CreateWallet :one
INSERT INTO wallets (
    user_id,
    address,
    encrypted_private_key,
    name,
    status,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, user_id, address, encrypted_private_key, name, status, created_at, updated_at
`

type CreateWalletParams struct {
	UserID              pgtype.UUID
	Address             string
	EncryptedPrivateKey []byte
	Name                pgtype.Text
	Status              string
	CreatedAt           pgtype.Timestamp
	UpdatedAt           pgtype.Timestamp
}

func (q *Queries) CreateWallet(ctx context.Context, arg CreateWalletParams) (Wallet, error) {
	row := q.db.QueryRow(ctx, createWallet,
		arg.UserID,
		arg.Address,
		arg.EncryptedPrivateKey,
		arg.Name,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Address,
		&i.EncryptedPrivateKey,
		&i.Name,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllAddresses = `-- name: GetAllAddresses :many
SELECT address FROM wallets
`

func (q *Queries) GetAllAddresses(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getAllAddresses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var address string
		if err := rows.Scan(&address); err != nil {
			return nil, err
		}
		items = append(items, address)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWalletByAddress = `-- name: GetWalletByAddress :one
SELECT id, user_id, address, encrypted_private_key, name, status, created_at, updated_at FROM wallets
WHERE address = $1 LIMIT 1
`

func (q *Queries) GetWalletByAddress(ctx context.Context, address string) (Wallet, error) {
	row := q.db.QueryRow(ctx, getWalletByAddress, address)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Address,
		&i.EncryptedPrivateKey,
		&i.Name,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWalletByID = `-- name: GetWalletByID :one
SELECT id, user_id, address, encrypted_private_key, name, status, created_at, updated_at FROM wallets
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetWalletByID(ctx context.Context, id pgtype.UUID) (Wallet, error) {
	row := q.db.QueryRow(ctx, getWalletByID, id)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Address,
		&i.EncryptedPrivateKey,
		&i.Name,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWalletsByUserID = `-- name: GetWalletsByUserID :many
SELECT id, user_id, address, encrypted_private_key, name, status, created_at, updated_at FROM wallets
WHERE user_id = $1
`

func (q *Queries) GetWalletsByUserID(ctx context.Context, userID pgtype.UUID) ([]Wallet, error) {
	rows, err := q.db.Query(ctx, getWalletsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wallet
	for rows.Next() {
		var i Wallet
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Address,
			&i.EncryptedPrivateKey,
			&i.Name,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWallet = `-- name: UpdateWallet :one
UPDATE wallets SET
    address = $2,
    encrypted_private_key = $3,
    name = $4,
    status = $5,
    updated_at = $6
WHERE id = $1 RETURNING id, user_id, address, encrypted_private_key, name, status, created_at, updated_at
`

type UpdateWalletParams struct {
	ID                  pgtype.UUID
	Address             string
	EncryptedPrivateKey []byte
	Name                pgtype.Text
	Status              string
	UpdatedAt           pgtype.Timestamp
}

func (q *Queries) UpdateWallet(ctx context.Context, arg UpdateWalletParams) (Wallet, error) {
	row := q.db.QueryRow(ctx, updateWallet,
		arg.ID,
		arg.Address,
		arg.EncryptedPrivateKey,
		arg.Name,
		arg.Status,
		arg.UpdatedAt,
	)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Address,
		&i.EncryptedPrivateKey,
		&i.Name,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
