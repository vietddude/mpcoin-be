// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: token.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getTokenByContractAddress = `-- name: GetTokenByContractAddress :one
SELECT id, chain_id, contract_address, name, symbol, decimals, logo_url, type, status, created_at, updated_at FROM tokens WHERE contract_address = $1
`

func (q *Queries) GetTokenByContractAddress(ctx context.Context, contractAddress string) (Token, error) {
	row := q.db.QueryRow(ctx, getTokenByContractAddress, contractAddress)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.ChainID,
		&i.ContractAddress,
		&i.Name,
		&i.Symbol,
		&i.Decimals,
		&i.LogoUrl,
		&i.Type,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTokenByID = `-- name: GetTokenByID :one
SELECT id, chain_id, contract_address, name, symbol, decimals, logo_url, type, status, created_at, updated_at FROM tokens WHERE id = $1
`

func (q *Queries) GetTokenByID(ctx context.Context, id pgtype.UUID) (Token, error) {
	row := q.db.QueryRow(ctx, getTokenByID, id)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.ChainID,
		&i.ContractAddress,
		&i.Name,
		&i.Symbol,
		&i.Decimals,
		&i.LogoUrl,
		&i.Type,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTokenBySymbol = `-- name: GetTokenBySymbol :one
SELECT id, chain_id, contract_address, name, symbol, decimals, logo_url, type, status, created_at, updated_at FROM tokens WHERE chain_id = $1 AND symbol = $2
`

type GetTokenBySymbolParams struct {
	ChainID pgtype.UUID
	Symbol  string
}

func (q *Queries) GetTokenBySymbol(ctx context.Context, arg GetTokenBySymbolParams) (Token, error) {
	row := q.db.QueryRow(ctx, getTokenBySymbol, arg.ChainID, arg.Symbol)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.ChainID,
		&i.ContractAddress,
		&i.Name,
		&i.Symbol,
		&i.Decimals,
		&i.LogoUrl,
		&i.Type,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTokensByChain = `-- name: GetTokensByChain :many
SELECT id, chain_id, contract_address, name, symbol, decimals, logo_url, type, status, created_at, updated_at FROM tokens WHERE chain_id = $1
`

func (q *Queries) GetTokensByChain(ctx context.Context, chainID pgtype.UUID) ([]Token, error) {
	rows, err := q.db.Query(ctx, getTokensByChain, chainID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Token
	for rows.Next() {
		var i Token
		if err := rows.Scan(
			&i.ID,
			&i.ChainID,
			&i.ContractAddress,
			&i.Name,
			&i.Symbol,
			&i.Decimals,
			&i.LogoUrl,
			&i.Type,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
